package bag3;
import java.util.*;
public class Exp0 {
	public static void main(String[] args) {
		int x1,y1,x2,y2,w,h;
		double r;
		Scanner scn=new Scanner(System.in);
		System.out.println("input x1,y1,r:");
		x1=scn.nextInt();
		y1=scn.nextInt();
		r=scn.nextDouble();
		System.out.println("input x2,y2,w,h:");
		x2=scn.nextInt();
		y2=scn.nextInt();
		w=scn.nextInt();
		h=scn.nextInt();
		Shape[] shape = new Shape[2];
		shape[0] = new Circle(new Point(x1,y1),r);
		shape[1] = new Rectangle(new Point(x2,y2),w,h);

		for(int i=0; i<shape.length; i++){
		System.out.println("面积为:"+String.format("%.2f", shape[i].getArea()));
		System.out.println("输出图形：");
		shape[i].print(10,20);
		}
		}
}
abstract class Shape{
	public double getArea() {
		return 0;
	}
	public boolean isContains(int x,int y) {
		return false;
	}
	public void print(int width,int height) {
		for(int i=0;i<width;i++) {
			for(int j=0;j<height;j++) {
				if(this.isContains(j, i)) {
					System.out.print("*");
				}
				else {
					System.out.print(" ");
				}
			}
			System.out.println();
		}
	}
}
class Circle extends Shape{
	private Point p;
	private double r;
	public Circle(Point p,double r) {
		this.p=p;
		this.r=r;
	}
	public double getArea() {
		return Math.PI*this.r*this.r;
	}
	public boolean isContains(int x,int y) {
		if(p.getDistance(x, y)<r)
			return true;
		else
			return false;
	}
}
class Rectangle extends Shape{
	private Point p;
	private int width;
	private int height;
	public Rectangle(Point p,int width,int height) {
		this.p=p;
		this.height=height;
		this.width=width;
	}
	public double getArea() {
		return this.width*this.height;
	}
	public boolean isContains(int x,int y) {
		if(p.getDistanceOfX(x)>=0&&p.getDistanceOfX(x)<this.width||p.getDistanceOfY(y)>0&&p.getDistanceOfY(y)<=this.height)
			return true;
		else
			return false;
	}
}
 class Point{
	private int x;
	private int y;
	public Point() {}
	public Point(int x,int y) {
		this.x=x;
		this.y=y;
	}
	public double getDistance(int x,int y) {
		return Math.sqrt((this.x-x)*(this.x-x)+(this.y-y)*(this.y-y));
	}
	public int getDistanceOfX(int x) {
		return x-this.x;
	}
	public int getDistanceOfY(int y) {
		return this.y-y;
	}
}
